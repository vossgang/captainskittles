//
//  StyleKitName.m
//  ProjectName
//
//  Created by AuthorName on 5/28/14.
//  Copyright (c) 2014 CompanyName. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//

#import "CardStyleKit.h"


@implementation CardStyleKit

#pragma mark Initialization

+ (void)initialize
{
}

#pragma mark Drawing Methods

+ (void)drawExplosionViewCardWithTitle:(NSString *)title withPointCount:(NSString *)points timeRemaining:(NSString *)timeRemaining withinFrame:(CGRect)frame
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    
    //// Gradient Declarations
    CGFloat gradientLocations[] = {0, 1};
    CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)UIColor.whiteColor.CGColor, (id)UIColor.blackColor.CGColor], gradientLocations);
    
    //// Shadow Declarations
    UIColor* shadow = [UIColor.blackColor colorWithAlphaComponent: 0.49];
    CGSize shadowOffset = CGSizeMake(4.1, 4.1);
    CGFloat shadowBlurRadius = 4.5;
    
    //// Rectangle Drawing
    CGRect rectangleRect = CGRectMake(CGRectGetMinX(frame) + floor(CGRectGetWidth(frame) * 0.02917 + 0.5), CGRectGetMinY(frame) + 6, floor(CGRectGetWidth(frame) * 0.97292) - floor(CGRectGetWidth(frame) * 0.02917 + 0.5) + 0.5, floor((CGRectGetHeight(frame) - 6) * 0.95000 + 0.5));
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: rectangleRect cornerRadius: 4];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [shadow CGColor]);
    CGContextBeginTransparencyLayer(context, NULL);
    [rectanglePath addClip];
    CGFloat rectangleResizeRatio = MIN(CGRectGetWidth(rectangleRect) / 226.5, CGRectGetHeight(rectangleRect) / 123.5);
    CGContextDrawRadialGradient(context, gradient,
                                CGPointMake(CGRectGetMidX(rectangleRect) + 0 * rectangleResizeRatio, CGRectGetMidY(rectangleRect) + 0 * rectangleResizeRatio), 0.85 * rectangleResizeRatio,
                                CGPointMake(CGRectGetMidX(rectangleRect) + 0 * rectangleResizeRatio, CGRectGetMidY(rectangleRect) + 0 * rectangleResizeRatio), 435.63 * rectangleResizeRatio,
                                kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);
    
    [UIColor.darkGrayColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];
    
    
    //// Text Drawing
    CGRect textRect = CGRectMake(CGRectGetMinX(frame) + 7, CGRectGetMinY(frame) + 6, 227, 77);
    {
        NSString* textContent = title;
        NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textStyle.alignment = NSTextAlignmentCenter;
        
        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HoeflerText-Regular" size: 30], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textStyle};
        
        [textContent drawInRect: CGRectOffset(textRect, 0, CGRectGetHeight(textRect) - [textContent boundingRectWithSize: textRect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height) withAttributes: textFontAttributes];
    }
    
    
    //// Text 3 Drawing
    CGRect text3Rect = CGRectMake(CGRectGetMinX(frame) + 123, CGRectGetMinY(frame) + 83, 101, 38.5);
    {
        NSString* textContent = timeRemaining;
        NSMutableParagraphStyle* text3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text3Style.alignment = NSTextAlignmentRight;
        
        NSDictionary* text3FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HoeflerText-Italic" size: UIFont.systemFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: text3Style};
        
        [textContent drawInRect: CGRectOffset(text3Rect, 0, CGRectGetHeight(text3Rect) - [textContent boundingRectWithSize: text3Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: text3FontAttributes context: nil].size.height) withAttributes: text3FontAttributes];
    }
    
    
    //// Text 2 Drawing
    CGRect text2Rect = CGRectMake(CGRectGetMinX(frame) + 17, CGRectGetMinY(frame) + 83, 101, 38.5);
    {
        NSString* textContent = points;
        NSMutableParagraphStyle* text2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text2Style.alignment = NSTextAlignmentLeft;
        
        NSDictionary* text2FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HoeflerText-Italic" size: UIFont.systemFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: text2Style};
        
        [textContent drawInRect: CGRectOffset(text2Rect, 0, CGRectGetHeight(text2Rect) - [textContent boundingRectWithSize: text2Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: text2FontAttributes context: nil].size.height) withAttributes: text2FontAttributes];
    }
    
    
    //// Cleanup
    CGGradientRelease(gradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawStackOfCardsWithTitle:(NSString *)title withPointCount:(NSString *)points andDuration:(NSString *)duration
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Gradient Declarations
    CGFloat gradientLocations[] = {0, 1};
    CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)UIColor.whiteColor.CGColor, (id)UIColor.blackColor.CGColor], gradientLocations);

    //// Shadow Declarations
    UIColor* shadow = [UIColor.blackColor colorWithAlphaComponent: 0.49];
    CGSize shadowOffset = CGSizeMake(4.1, 4.1);
    CGFloat shadowBlurRadius = 4.5;

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(8, 8, 226.5, 123.5) cornerRadius: 4];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [shadow CGColor]);
    CGContextBeginTransparencyLayer(context, NULL);
    [rectanglePath addClip];
    CGContextDrawRadialGradient(context, gradient,
        CGPointMake(121.25, 69.75), 0.85,
        CGPointMake(121.25, 69.75), 435.63,
        kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [UIColor.darkGrayColor setStroke];
    rectanglePath.lineWidth = 1;
    [rectanglePath stroke];


    //// Rectangle 2 Drawing
    UIBezierPath* rectangle2Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(7, 7, 226.5, 123.5) cornerRadius: 4];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [shadow CGColor]);
    CGContextBeginTransparencyLayer(context, NULL);
    [rectangle2Path addClip];
    CGContextDrawRadialGradient(context, gradient,
        CGPointMake(120.25, 68.75), 0.85,
        CGPointMake(120.25, 68.75), 435.63,
        kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [UIColor.darkGrayColor setStroke];
    rectangle2Path.lineWidth = 1;
    [rectangle2Path stroke];


    //// Rectangle 3 Drawing
    UIBezierPath* rectangle3Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(6, 6, 226.5, 123.5) cornerRadius: 4];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [shadow CGColor]);
    CGContextBeginTransparencyLayer(context, NULL);
    [rectangle3Path addClip];
    CGContextDrawRadialGradient(context, gradient,
        CGPointMake(119.25, 67.75), 0.85,
        CGPointMake(119.25, 67.75), 435.63,
        kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [UIColor.darkGrayColor setStroke];
    rectangle3Path.lineWidth = 1;
    [rectangle3Path stroke];


    //// Rectangle 4 Drawing
    UIBezierPath* rectangle4Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(5, 5, 226.5, 123.5) cornerRadius: 4];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [shadow CGColor]);
    CGContextBeginTransparencyLayer(context, NULL);
    [rectangle4Path addClip];
    CGContextDrawRadialGradient(context, gradient,
        CGPointMake(118.25, 66.75), 0.85,
        CGPointMake(118.25, 66.75), 435.63,
        kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [UIColor.darkGrayColor setStroke];
    rectangle4Path.lineWidth = 1;
    [rectangle4Path stroke];


    //// Rectangle 5 Drawing
    UIBezierPath* rectangle5Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(4, 4, 226.5, 123.5) cornerRadius: 4];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [shadow CGColor]);
    CGContextBeginTransparencyLayer(context, NULL);
    [rectangle5Path addClip];
    CGContextDrawRadialGradient(context, gradient,
        CGPointMake(117.25, 65.75), 0.85,
        CGPointMake(117.25, 65.75), 435.63,
        kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [UIColor.darkGrayColor setStroke];
    rectangle5Path.lineWidth = 1;
    [rectangle5Path stroke];


    //// Rectangle 6 Drawing
    UIBezierPath* rectangle6Path = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(3, 3, 226.5, 123.5) cornerRadius: 4];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [shadow CGColor]);
    CGContextBeginTransparencyLayer(context, NULL);
    [rectangle6Path addClip];
    CGContextDrawRadialGradient(context, gradient,
        CGPointMake(116.25, 64.75), 0.85,
        CGPointMake(116.25, 64.75), 435.63,
        kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [UIColor.darkGrayColor setStroke];
    rectangle6Path.lineWidth = 1;
    [rectangle6Path stroke];


    //// Text Drawing
    CGRect textRect = CGRectMake(3, 3, 227, 77);
    {
        NSString* textContent = title;
        NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HoeflerText-Regular" size: 30], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: textStyle};

        [textContent drawInRect: CGRectOffset(textRect, 0, CGRectGetHeight(textRect) - [textContent boundingRectWithSize: textRect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height) withAttributes: textFontAttributes];
    }


    //// Text 3 Drawing
    CGRect text3Rect = CGRectMake(119, 80, 101, 38.5);
    {
        NSString* textContent = duration;
        NSMutableParagraphStyle* text3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text3Style.alignment = NSTextAlignmentRight;

        NSDictionary* text3FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HoeflerText-Italic" size: UIFont.systemFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: text3Style};

        [textContent drawInRect: CGRectOffset(text3Rect, 0, CGRectGetHeight(text3Rect) - [textContent boundingRectWithSize: text3Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: text3FontAttributes context: nil].size.height) withAttributes: text3FontAttributes];
    }


    //// Text 2 Drawing
    CGRect text2Rect = CGRectMake(13, 80, 101, 38.5);
    {
        NSString* textContent = points;
        NSMutableParagraphStyle* text2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text2Style.alignment = NSTextAlignmentLeft;

        NSDictionary* text2FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HoeflerText-Italic" size: UIFont.systemFontSize], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: text2Style};

        [textContent drawInRect: CGRectOffset(text2Rect, 0, CGRectGetHeight(text2Rect) - [textContent boundingRectWithSize: text2Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: text2FontAttributes context: nil].size.height) withAttributes: text2FontAttributes];
    }


    //// Cleanup
    CGGradientRelease(gradient);
    CGColorSpaceRelease(colorSpace);
}

+ (void)drawPresentationCardWithTitle:(NSString *)title withTextField:(NSString *)textField withCardNumber:(NSString *)cardNumber andTimeRemaining:(NSString *)timeRemaining
{
    //// General Declarations
    CGColorSpaceRef colorSpace = CGColorSpaceCreateDeviceRGB();
    CGContextRef context = UIGraphicsGetCurrentContext();


    //// Gradient Declarations
    CGFloat gradientLocations[] = {0, 1};
    CGGradientRef gradient = CGGradientCreateWithColors(colorSpace, (__bridge CFArrayRef)@[(id)UIColor.whiteColor.CGColor, (id)UIColor.blackColor.CGColor], gradientLocations);

    //// Shadow Declarations
    UIColor* shadow = [UIColor.blackColor colorWithAlphaComponent: 0.49];
    CGSize shadowOffset = CGSizeMake(4.1, 4.1);
    CGFloat shadowBlurRadius = 4.5;

    //// Rectangle Drawing
    UIBezierPath* rectanglePath = [UIBezierPath bezierPathWithRoundedRect: CGRectMake(10.5, 9, 400.5, 221.5) cornerRadius: 9];
    CGContextSaveGState(context);
    CGContextSetShadowWithColor(context, shadowOffset, shadowBlurRadius, [shadow CGColor]);
    CGContextBeginTransparencyLayer(context, NULL);
    [rectanglePath addClip];
    CGContextDrawRadialGradient(context, gradient,
        CGPointMake(210.75, 119.75), 1.58,
        CGPointMake(210.75, 119.75), 814.23,
        kCGGradientDrawsBeforeStartLocation | kCGGradientDrawsAfterEndLocation);
    CGContextEndTransparencyLayer(context);
    CGContextRestoreGState(context);

    [UIColor.darkGrayColor setStroke];
    rectanglePath.lineWidth = 2.5;
    [rectanglePath stroke];


    //// Text Drawing
    CGRect textRect = CGRectMake(25, 9, 372, 64);
    {
        NSString* textContent = title;
        NSMutableParagraphStyle* textStyle = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        textStyle.alignment = NSTextAlignmentCenter;

        NSDictionary* textFontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HoeflerText-Regular" size: 37.5], NSForegroundColorAttributeName: UIColor.darkGrayColor, NSParagraphStyleAttributeName: textStyle};

        [textContent drawInRect: CGRectOffset(textRect, 0, CGRectGetHeight(textRect) - [textContent boundingRectWithSize: textRect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: textFontAttributes context: nil].size.height) withAttributes: textFontAttributes];
    }


    //// Text 2 Drawing
    CGRect text2Rect = CGRectMake(25, 73, 372, 143);
    {
        NSString* textContent = textField;
        NSMutableParagraphStyle* text2Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text2Style.alignment = NSTextAlignmentCenter;

        NSDictionary* text2FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HoeflerText-Regular" size: 25], NSForegroundColorAttributeName: UIColor.blackColor, NSParagraphStyleAttributeName: text2Style};

        [textContent drawInRect: CGRectOffset(text2Rect, 0, (CGRectGetHeight(text2Rect) - [textContent boundingRectWithSize: text2Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: text2FontAttributes context: nil].size.height) / 2) withAttributes: text2FontAttributes];
    }


    //// Text 3 Drawing
    CGRect text3Rect = CGRectMake(25, 174, 139, 42);
    {
        NSString* textContent = cardNumber;
        NSMutableParagraphStyle* text3Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text3Style.alignment = NSTextAlignmentLeft;

        NSDictionary* text3FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HoeflerText-Italic" size: 19.5], NSForegroundColorAttributeName: UIColor.darkGrayColor, NSParagraphStyleAttributeName: text3Style};

        [textContent drawInRect: CGRectOffset(text3Rect, 0, CGRectGetHeight(text3Rect) - [textContent boundingRectWithSize: text3Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: text3FontAttributes context: nil].size.height) withAttributes: text3FontAttributes];
    }


    //// Text 4 Drawing
    CGRect text4Rect = CGRectMake(258, 174, 139, 42);
    {
        NSString* textContent = timeRemaining;
        NSMutableParagraphStyle* text4Style = NSMutableParagraphStyle.defaultParagraphStyle.mutableCopy;
        text4Style.alignment = NSTextAlignmentRight;

        NSDictionary* text4FontAttributes = @{NSFontAttributeName: [UIFont fontWithName: @"HoeflerText-Italic" size: 19.5], NSForegroundColorAttributeName: UIColor.darkGrayColor, NSParagraphStyleAttributeName: text4Style};

        [textContent drawInRect: CGRectOffset(text4Rect, 0, CGRectGetHeight(text4Rect) - [textContent boundingRectWithSize: text4Rect.size options: NSStringDrawingUsesLineFragmentOrigin attributes: text4FontAttributes context: nil].size.height) withAttributes: text4FontAttributes];
    }


    //// Cleanup
    CGGradientRelease(gradient);
    CGColorSpaceRelease(colorSpace);
}

@end
